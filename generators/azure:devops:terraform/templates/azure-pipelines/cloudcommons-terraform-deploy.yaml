parameters:  
  pool: 'ubuntu-latest'
  terraformVersion: '0.12.19'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  artifactName: 'terraform'
  terraformRoot: ''

jobs:
- job: Deploy${{ parameters.name }}
  displayName: 'Deploy - ${{ parameters.environment }}'
  pool:
    name: ${{ parameters.pool }}

  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Terraform - Download artifacts'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: '${{ parameters.artifactName }}'
      downloadPath: '${{ parameters.workingDirectory }}'

  - task: TerraformInstaller@0
    displayName: 'Terraform - Install'
    inputs:
      terraformVersion: '${{ parameters.terraformVersion }}'

  - task: TerraformCLI@0
    displayName: "Terraform - Init"
    inputs:
      command: 'init'
      continueOnError: true
      workingDirectory: '${{ parameters.workingDirectory }}/${{ parameters.artifactName }}/${{ parameters.terraformRoot }}'
      backendType: 'azurerm'
      backendServiceArm: '${{ parameters.backendServiceArm }}'
      ensureBackend: true
      backendAzureRmResourceGroupName: '${{ parameters.backendAzureRmResourceGroupName }}'
      backendAzureRmResourceGroupLocation: '${{ parameters.backendAzureRmResourceGroupLocation }}'
      backendAzureRmStorageAccountName: '${{ parameters.backendAzureRmStorageAccountName }}'
      backendAzureRmStorageAccountSku: '${{ parameters.backendAzureRmStorageAccountSku }}'
      backendAzureRmContainerName: '${{ parameters.backendAzureRmContainerName }}'
      backendAzureRmKey: '${{ parameters.backendAzureRmKey }}'

  - task: CmdLine@2
    displayName: 'Terraform - Select workspace "${{ parameters.environment }}"'
    inputs:
      script: 'terraform workspace select ${{ parameters.environment }} || terraform workspace new ${{ parameters.environment }}'

  - task: TerraformCLI@0
    displayName: 'Terraform plan'
    inputs:
      command: 'plan'
      environmentServiceName: '${{ parameters.subscriptionName }}'
      workingDirectory: '${{ parameters.workingDirectory }}/${{ parameters.artifactName }}/${{ parameters.terraformRoot }}'

## Manual interventions are not compatible with yaml pipelines. Use at your own risk
#   - task: ManualIntervention@8
#     inputs:
#       instructions: 'Validate terraform plan'        

#   - task: TerraformCLI@0
#     displayName: 'Terraform apply'
#     inputs:
#       command: 'apply'
#       environmentServiceName: '${{ parameters.subscriptionName }}'
#       workingDirectory: '${{ parameters.workingDirectory }}/${{ parameters.artifactName }}/${{ parameters.terraformRoot }}'